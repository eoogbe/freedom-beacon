var FREE = FREE || {};

FREE.HeaderBeacon = (function(){
    function init($parent) {
        $parent.html('<button class="btn btn-primary group-end header-beacon" type="button">illuminate beacon</button>');
        
        $('.header-beacon').click(function(){
            var timerHtml = '<input type="number" max="60" min="1" value="30" name="header-timer" class="group-end" autofocus>';
            $parent.html(timerHtml);
            
            var countdowner = FREE.Countdowner;
			countdowner.init();
			countdowner.countdown($(timerHtml), init);
        });
    }
    
    return {'init': init};
})();
var FREE = FREE || {};

FREE.MainBeacon = (function(){
    var $beaconBtn
      , $timerLabel
      , countdowner = null;
    
    function toggleBeacon(btnText, readonly) {
        $beaconBtn.text(btnText);
        $timerLabel.prop('readonly', readonly);
    }
    
    function illuminateBeacon() {
        toggleBeacon('deactivate beacon', true);
        
        if (countdowner === null) {
            countdowner = FREE.Countdowner;
            countdowner.init();
        }
        
        countdowner.countdown($('input[name="main-timer"]'), illuminateBeacon);
    }
    
    function deactivateBeacon() {
        toggleBeacon('illuminate beacon', null);
        countdowner.stop();
    }
    
    function beaconToggled() {
        $beaconBtn.toggleClass('btn-primary');
        $beaconBtn.toggleClass('btn-default');
        $timerLabel.toggleClass('readonly');
        
        if ($(this).is(':checked')) {
            illuminateBeacon();
        } else {
            deactivateBeacon();
        }
    }
    
    function registerEventHandlers() {
        $('#beacon').change(beaconToggled);
    }
    
    function init() {
        $beaconBtn = $('.beacon-btn');
        $timerLabel = $('input[name="main-timer"]');
    }
    
    return {
        'init': init,
        'registerEventHandlers': registerEventHandlers
    };
})();
var FREE = FREE || {};

FREE.MessageForm = (function(){
    function clearInput() {
        $("input[name='message']").val("");
    }
    
    function appendMessage(message, type) {
        $.get("/partials/conv-item", {
            "message": message,
            "type": type
        }, function(data){
            $("#messages-box").append(data);
        });
    }
    
    function messageWritten(e) {
		e.prevenDefault();
		
        var usrMsg = $("input[name='message']").val();
		appendMessage(usrMsg, "user");
        clearInput();
		
		setTimeout(appendMessage, 3000, "Friend's reply", "friend");
    }
    
    function registerEventHandlers() {
        $('form[name="message-form"]').submit(messageWritten);
    }
    
    return {
        'init': function(){},
        'registerEventHandlers': registerEventHandlers
    };
})();
var FREE = FREE || {};

FREE.Facebook = (function(){
    var url
      , FB;
    
    function authResponseChanged(response) {
        if (url.getPathname() === '/') {
            if (response.status === 'connected') {
                url.redirect('/beacons/create');
            } else {
                FB.login(function(){
                    url.redirect('/beacons/create');
                });
            }
        }
    }
    
    function loadSdk() {
        // Load the SDK asynchronously
        (function(d){
            var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
            if (d.getElementById(id)) {return;}
            js = d.createElement('script'); js.id = id; js.async = true;
            js.src = "//connect.facebook.net/en_US/all.js";
            ref.parentNode.insertBefore(js, ref);
        }(document));
    }
    
    function initFacebook() {
        loadSdk();
    }
    
    function logoutClicked() {
        FB.logout();
		url.redirect('/');
    }
    
    function init(facebook) {
        FB = facebook;
        
        FB.init({
		  appId      : '1389788214618486',
		  status     : true, // check login status
		  cookie     : true, // enable cookies to allow the server to access the session
		  xfbml      : true  // parse XFBML
		});
        
        url = FREE.Url;
        url.init();
    }
    
    function registerEventHandlers() {
        // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
		// for any authentication related change, such as login, logout or session refresh. This means that
		// whenever someone who was previously logged out tries to log in again, the correct case below 
		// will be handled. 
		FB.Event.subscribe('auth.authResponseChange', authResponseChanged);
        
        $('button[name="logout"]').click(logoutClicked);
    }
    
    return {
        'init': init,
        'initFacebook': initFacebook,
        'registerEventHandlers': registerEventHandlers
    };
})();
var FREE = FREE || {};

FREE.FriendsList = (function(){
    function meetRequested(e) {
		e.preventDefault();
		
		var status = $(this).parent().parent().find(".status");
		status.text("pinged");
	}
	
	function closeClicked() {
		$(this).parent().hide();
	}
	
	function distanceClicked() {
		$(this).siblings('.distance-flyout').show();
	}
    
    function registerEventHandlers() {
        $('.free > td > a').click(meetRequested);
        $('.offline > td > a').click(meetRequested);
		
		$('button[name="distance-btn"]').click(distanceClicked);
		$('button[name="close-btn"]').click(closeClicked);
    }
    
    return {
		'init': function(){},
		'registerEventHandlers': registerEventHandlers
	};
})();
var FREE = FREE || {};

FREE.RequestButton = (function(){
    function friendAdded() {
        $(this).parent().html('<span class="glyphicon glyphicon-transfer"></span> pending');
    }
    
    function registerEventHandlers() {
        $('button[name="add-friend-btn"]').click(friendAdded);
    }
    
    return {
        'init': function(){},
        'registerEventHandlers': registerEventHandlers
    };
})();
var FREE = FREE || {};

FREE.Countdowner = (function(){
    var DELAY = 1000;
    var interval;
    
    function tick($timer, done) {
        var min = parseInt($timer.data('min'));
        var sec = parseInt($timer.data('sec'));
        
        if (sec === 0 && min === 0) {
            done();
        } else {
            if (sec === 0) {
                --min;
                sec = 59;
            } else {
                --sec;
            }
            
            $timer.data('min', min);
            $timer.data('sec', sec);
            
            if (sec < 10) sec = '0' + sec;
            $timer.val(min + ':' + sec);
        }
    };
    
    function countdown($timer, done) {
        interval = new FREE.Interval(function(){
            tick($timer, done);
        }, DELAY);
        
        interval.start();
    };
    
    function stop() {
        interval.stop();
    }
    
    return {
        'init': function(){},
        'countdown': countdown,
        'stop': stop
    };
})();

var FREE = FREE || {};

FREE.HeaderTimer = (function(){
    var $timerBtn;
    
    function hasTimer() {
		return !isNaN(parseInt($timerBtn.data('min')));
	}
	
	function makeTimerInvisible() {
		$timerBtn.css('visibility', 'hidden');
	}
	
	function replaceWithButton() {
		FREE.HeaderBeacon.init();
	}
	
	function startCountdown() {
		var countdowner = FREE.Countdowner;
		countdowner.init();
		countdowner.countdown($timerBtn, replaceWithButton);
	}
	
	function setupTimer() {
		startCountdown();
		$timerBtn.click(timerClicked);
	}
	
	function hasTimerBtn() {
		return $('input[name="header-timer-btn"]').length > 0;
	}
	
	function createTimerBtnHtml(min) {
		return '<input type="button" class="btn btn-default" data-min="' + min
			+ '" data-sec="0" name="header-timer-btn" value="' + min + ':00">';
	}
	
	function timeInputed(e) {
		e.preventDefault();
		
		if (!hasTimerBtn()) {
			var min = $('input[name="header-timer"]').val();
			$(this).html(createTimerBtnHtml(min));
			$timerBtn = $('input[name="header-timer-btn"]');
			setupTimer();
		}
	}
	
	function timerClicked() {
		var min = $timerBtn.data('min');
		$(this).parent().html('<input type="number" name="header-timer" min="1" max="60" value="' + min + '" autofocus>');
		$('form[name="header-timer-form"]').submit(timeInputed);
	}
	
	function init() {
		$timerBtn = $('input[name="header-timer-btn"]');
	}
    
    function run(){
        if (hasTimer()) {
            setupTimer();
        } else {
            makeTimerInvisible();
        }
    };
    
    return {
		'init': init,
		'run': run
	};
})();

var FREE = FREE || {};

// Adapted from http://stackoverflow.com/a/2679208/830988
FREE.Interval = function(fn, delay) {
    var timerId = false;
    
    this.start = function () {
        if (!this.isRunning()) timerId = setInterval(fn, delay);
    };
    
    this.stop = function () {
        clearInterval(timerId);
        timerId = false;
    };
    
    this.isRunning = function () {
        return timerId !== false;
    };
};
var FREE = FREE || {};

FREE.BackButton = (function(){
    function backClicked(e) {
        e.preventDefault();
        
        var url = FREE.Url;
        url.init();
        url.goBack();
    }
    
    function registerEventHandlers() {
        $('.back-btn').click(backClicked);
    }
    
    return {
        'init': function(){},
        'registerEventHandlers': registerEventHandlers
    };
})();

var FREE = FREE || {};

FREE.Url = (function(){
    function redirect(url) {
        window.location = url;
    }
    
    function getPathname() {
        return window.location.pathname;
    }
    
    function goBack() {
        history.back(-1);
    }
    
    return {
        'init': function(){},
        'redirect': redirect,
        'getPathname': getPathname,
        'goBack': goBack
    };
})();
'use strict';

// Call this function when the page loads (the "ready" event)
$(document).ready(function() {
	initializePage();
})

/*
 * Function that is called when the document is ready.
 */
function initializePage() {
	(function() {
		var facebook = FREE.Facebook;
		
		window.fbAsyncInit = function() {
			facebook.init(FB);
			facebook.registerEventHandlers();
		}
		
		facebook.initFacebook();
	})();
	
	(function() {
		var backButton = FREE.BackButton;
		backButton.init();
		backButton.registerEventHandlers();
	})();
	
	(function() {
		var headerTimer = FREE.HeaderTimer;
		headerTimer.init();
		headerTimer.run();
	})();
	
	(function() {
		var mainBeacon = FREE.MainBeacon;
		mainBeacon.init();
		mainBeacon.registerEventHandlers();
	})();
	
	(function() {
		var friendsList = FREE.FriendsList;
		friendsList.init();
		friendsList.registerEventHandlers();
	})();
	
	(function() {
		var requestButton = FREE.RequestButton;
		requestButton.init();
		requestButton.registerEventHandlers();
	})();
	
	(function() {
		var messageForm = FREE.MessageForm;
		messageForm.init();
		messageForm.registerEventHandlers();
	})();
}
